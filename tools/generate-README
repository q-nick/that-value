#!/usr/bin/env node
'use strict';

var fs = require('fs');

var tests = [];
var validator = require('../lib/validator/number/number.test.json');
tests.push(validator);
validator = require('../lib/validator/string/string.test.json');
tests.push(validator);
validator = require('../lib/validator/email/email.test.json');
tests.push(validator);
validator = require('../lib/validator/ip/ip.test.json');
tests.push(validator);
validator = require('../lib/validator/isbn/isbn.test.json');
tests.push(validator);
validator = require('../lib/validator/vin/vin.test.json');
tests.push(validator);
validator = require('../lib/validator/uri/uri.test.json');
tests.push(validator);
validator = require('../lib/validator/zipCode/zipCode.test.json');
tests.push(validator);
validator = require('../lib/validator/greater/greater.test.json');
tests.push(validator);
validator = require('../lib/validator/lower/lower.test.json');
tests.push(validator);
validator = require('../lib/validator/shorter/shorter.test.json');
tests.push(validator);
validator = require('../lib/validator/longer/longer.test.json');
tests.push(validator);

function generate() {
    var ReadmeContent =
            '# that-value & ThatValue \n' +
            '### Installation: \n' +
            'Currently options to install are:\n' +
            '```\n' +
            'npm install that-value --save\n' +
            '```\n' +
            '```\n' +
            'bower install that-value --save\n' +
            '```\n' +
            'After that you must include main file: ```that-value.js``` in your code. It will add ```ThatValue``` to global namespace.\n' +
            '### How to use: \n' +
            'ThatValue uses natural language to show what validation is really doing. It has few hyphens like: "is", "and" and probably few more in future.\n' +
            'For Example if you want to check something like this:\n' +
            '"If that value is an valid email and contains specific domain "mail.pl" you can write it as:"\n' +
            '```\n' +
            'if(ThatValue(\'paul@mail.pl\').is.email().and.contains(\'mail.pl\').valid()) \n{ \n/*do something*/\n}\n' +
            '```\n' +
            'call ```.valid()``` is required here to get validation result. But we can use it in another way.\n' +
            'You can also check which property isn`t valid, then you should save validation object that is returned by ThatValue.\n' +
            '```\n' +
            'var emailValue = ThatValue(\'paul@omg.pl\').is.string().is.email().and.contains(\'paul\');\n\n' +
            'if(emailValue.valid())\n{\n    /* when valid */\n} \nelse\n{ \n  /*not valid*/\n' +
            '   var errorList = emailValue.getErrors();\n' +
            '}\n' +
            '```\n' +
            'now ```errorList``` will contain name of validators which returned false. In This Example: ```["email"]```\n'
        ;
    ReadmeContent += '# List of currently available validators\n';
    for (var i = 0; i < tests.length; i++) {
        var test = tests[i];
        for (var key in test) {
            ReadmeContent += '### Validator - ' + key + '\n';

            for (var j = 0; (j < test[key].valid.length && j < 10); j++) {
                if (typeof test[key].valid[j] === 'object' && test[key].valid[j] && 'arg' in test[key].valid[j]) {
                    ReadmeContent += '```\n ThatValue(' + (typeof test[key].valid[j].value === 'string' ? '"' + test[key].valid[j].value + '"' : test[key].valid[j].value ) + ').is.' + key + '(' + (typeof test[key].valid[j].arg === 'string' ? '"' + test[key].valid[j].arg + '"' : test[key].valid[j].arg ) + ').valid(); \n```\n\n';
                } else {
                    ReadmeContent += '```\n ThatValue(' + (typeof test[key].valid[j] === 'string' ? '"' + test[key].valid[j] + '"' : test[key].valid[j] ) + ').is.' + key + '().valid(); \n```\n\n';
                }
            }
        }
    }

    fs.writeFile('README.md', ReadmeContent);
}

generate();